#!/usr/bin/env python3

'''
Author: Ã‰rico Nogueira
'''

from argparse import ArgumentParser
from functools import reduce
from pickle import dump
from time import sleep

import numpy as np
from scipy.io import savemat

from bpm_app.pvs import create_pv, put_pv, get_pv, wait_for_pv_connection, wait_pv
from bpm_app.sirius import rtmlamp_slot, get_pv_prefix, crate_number, rtmlamp_channels, get_rtmlamp_prefix

parser = ArgumentParser(
        'acquire_lamp',
        'Acquire and save RTM-LAMP data')
parser.add_argument('output_file')
parser.add_argument('--mat-file')
parser.add_argument('--voltage-step', type=float)
parser.add_argument('--current-step', type=float)
parser.add_argument('--despike', type=float)
parser.add_argument('--single-crate', type=int)
parser.add_argument('--only-main-channels', action='store_true')
parser.add_argument('--channels', type=int, nargs='*', help='Channels which will be acted on')
parser.add_argument('--samples', type=int, default=100_000)
parser.add_argument('--samples-pre', type=int, default=100)
parser.add_argument('--no-trigger', action='store_true')
parser.add_argument('--now', action='store_true')
parser.add_argument('--voltage-square-low', type=float)
parser.add_argument('--voltage-square-high', type=float)
parser.add_argument('--wave-freq', type=float)

args = parser.parse_args()

out_file = args.output_file
out_mat_file = args.mat_file

voltage_step = args.voltage_step
current_step = args.current_step

despike_threshold = args.despike

if args.only_main_channels:
    rtmlamp_channels = rtmlamp_channels[:8]
h_channels = rtmlamp_channels[0::2]
v_channels = rtmlamp_channels[1::2]

if args.channels is not None:
    rtmlamp_channels_act = [rtmlamp_channels[i] for i in args.channels]
else:
    rtmlamp_channels_act = rtmlamp_channels

samples_val = args.samples
samples_pre_val = args.samples_pre

voltage_step_b = voltage_step is not None
current_step_b = current_step is not None
test_values_b = args.voltage_square_low is not None

single_crate = args.single_crate
if args.single_crate is None:
    crates_n = range(1, 21)
else:
    crates_n = [args.single_crate]

actions = [voltage_step_b, current_step_b, test_values_b]

if reduce(lambda x, y: x + (1 if y else 0), actions, 0) >= 2:
    raise "Can't use two or more actions at the same time"

control_ps = reduce(lambda x, y: x or y, actions)

no_trigger = args.no_trigger
acq_now = args.now

lamp_triggers = [0, 4]
lamp_trigger_source = 5

voltage_gain = 1.12916762036e-4
square_wave_base_freq = 100e6

def despiker(array, thres):
    for idx in range(len(array)):
        if idx == 0:
            # Assumes no spike on index 0
            continue
        else:
            if abs(array[idx] - array[idx - 1]) > thres:
                array[idx] = array[idx - 1]

trigger_type = []
trigger_rep = []
trigger_event = []
samples_pre = []
samples_post = []

trigger_mux_sel = []
trigger_mux_src = []

trig_en = []
voltage_sp = []
current_sp = []
curr_loop_mode = []
pwr_state = []

test_low = []
test_high = []
test_period = []

h_current_data = []
h_voltage_data = []
v_current_data = []
v_voltage_data = []

crates = [crate_number(i) for i in crates_n]
for crate in crates:
    prefix = get_pv_prefix(crate, rtmlamp_slot)

    trigger_type.append(create_pv(prefix + f'LAMPTrigger-Sel'))
    trigger_rep.append(create_pv(prefix + f'LAMPTriggerRep-Sel'))
    trigger_event.append(create_pv(prefix + f'LAMPTriggerEvent-Cmd'))
    samples_pre.append(create_pv(prefix + f'LAMPSamplesPre-SP'))
    samples_post.append(create_pv(prefix + f'LAMPSamplesPost-SP'))

    trigger_mux_sel.extend((create_pv(prefix + f'TRIGGER_LAMP{i}RcvInSel-SP') for i in lamp_triggers))
    trigger_mux_src.extend((create_pv(prefix + f'TRIGGER_LAMP{i}RcvSrc-Sel') for i in lamp_triggers))

    for channel in rtmlamp_channels_act:
        rprefix = get_rtmlamp_prefix(crate, channel)

        trig_en.append(create_pv(rprefix + 'TrigEn-Sel'))
        voltage_sp.append(create_pv(rprefix + 'Voltage-SP'))
        current_sp.append(create_pv(rprefix + 'Current-SP'))
        curr_loop_mode.append(create_pv(rprefix + 'CurrLoopMode-Sel'))
        pwr_state.append(create_pv(rprefix + 'PwrState-Sel'))

        test_low.append(create_pv(rprefix + 'TestLimA-SP'))
        test_high.append(create_pv(rprefix + 'TestLimB-SP'))
        test_period.append(create_pv(rprefix + 'TestWavePeriod-SP'))

    for channel in h_channels:
        rprefix = get_rtmlamp_prefix(crate, channel)
        h_current_data.append(create_pv(rprefix + 'LAMPCurrentData'))
        h_voltage_data.append(create_pv(rprefix + 'LAMPVoltageData'))
    for channel in v_channels:
        rprefix = get_rtmlamp_prefix(crate, channel)
        v_current_data.append(create_pv(rprefix + 'LAMPCurrentData'))
        v_voltage_data.append(create_pv(rprefix + 'LAMPVoltageData'))

def move_01M1(l):
    tmp = l[0]
    l[0:-1] = l[1:]
    l[-1] = tmp

if single_crate is None:
    move_01M1(h_current_data)
    move_01M1(h_voltage_data)
    move_01M1(v_current_data)
    move_01M1(v_voltage_data)

current_data = h_current_data + v_current_data
voltage_data = h_voltage_data + v_voltage_data
all_data = current_data + voltage_data

fofb_event = create_pv("AS-RaMO:TI-EVG:Evt10ExtTrig-Cmd")

wait_for_pv_connection()

# setup acq
put_pv(trigger_type, 0 if acq_now else 1, wait=False, check=False)
put_pv(trigger_rep, 0, wait=False, check=False)
if acq_now:
    put_pv(samples_pre, samples_val, wait=False, check=False)
    put_pv(samples_post, 0, wait=False, check=False)
else:
    put_pv(samples_pre, samples_pre_val, wait=False, check=False)
    put_pv(samples_post, samples_val - samples_pre_val, wait=False, check=False)
put_pv(trigger_event, 1, wait=False)

# setup triggering
put_pv(trigger_mux_src, 0, wait=False)
put_pv(trigger_mux_sel, lamp_trigger_source, wait=False)

if voltage_step_b:
    mode = 0
elif current_step_b:
    mode = 2
elif test_values_b:
    mode = 1

# reset rtmlamp
if control_ps:
    put_pv(trig_en, 0, wait=False);
    put_pv(voltage_sp, 0, wait=False);
    put_pv(current_sp, 0, wait=False);
    put_pv(curr_loop_mode, mode, wait=False);
    put_pv(pwr_state, 1, wait=False);

wait_pv()

if control_ps:
    put_pv(trig_en, 1);

if voltage_step_b:
    put_pv(voltage_sp, voltage_step);
elif current_step_b:
    put_pv(current_sp, current_step);
elif test_values_b:
    put_pv(test_low, args.voltage_square_low/voltage_gain)
    put_pv(test_high, args.voltage_square_high/voltage_gain)
    put_pv(test_period, 1/args.wave_freq * square_wave_base_freq / 2)
wait_pv()

def get_data_timestamps(data):
    return np.array([pv.sp.get_timevars()['timestamp'] for pv in data])
all_data_timestamps_initial = get_data_timestamps(all_data)

put_pv(trigger_event, 0)
sleep(1)

if control_ps and not no_trigger:
    put_pv([fofb_event], 1)

print('Waiting for array data to be updated...', end='', flush=True)
while np.any(get_data_timestamps(all_data) == all_data_timestamps_initial):
    print('.', end='', flush=True)
    sleep(1)
print('')

if control_ps:
    put_pv(trig_en, 0)
    put_pv(voltage_sp, 0, wait=False)
    put_pv(current_sp, 0, wait=False)
    put_pv(test_low, 0, wait=False)
    put_pv(test_high, 0, wait=False)
    wait_pv()

data = {'current_step': current_step, 'voltage_step': voltage_step, 'samples_pre': samples_val if acq_now else samples_pre_val}
data['current'] = np.zeros((samples_val, len(crates) * len(rtmlamp_channels)))
data['voltage'] = np.zeros((samples_val, len(crates) * len(rtmlamp_channels)))

print('Fetching current data...')
i_data = np.array(get_pv(current_data))
print('Fetching voltage data...')
v_data = np.array(get_pv(voltage_data))
if despike_threshold:
    print('Despiking data...')
    for j in range(len(i_data)):
        despiker(i_data[j], despike_threshold)
print('Copying data to dict...')
data['current'][:] = i_data.T
data['voltage'][:] = v_data.T

print('Saving data')
with open(out_file, 'wb') as f:
    dump(data, f)

# clean up values so they can be saved
if current_step is None:
    data['current_step'] = 0
if voltage_step is None:
    data['voltage_step'] = 0

if out_mat_file is not None:
    savemat(out_mat_file, data)
