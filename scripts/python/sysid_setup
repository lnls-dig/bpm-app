#!/usr/bin/env python3

'''
Author: Ã‰rico Nogueira
'''

from argparse import ArgumentParser
from time import sleep

import numpy as np

from bpm_app.pvs import create_pv, wait_for_pv_connection, put_pv, wait_pv
from bpm_app.sirius import crate_number, get_pv_prefix, rtmlamp_slot

parser = ArgumentParser(
        'sysid_setup',
        'Setup the system identification module')
parser.add_argument('--reset-prbs', action='store_true')

args = parser.parse_args()

crates = [crate_number(i) for i in range(1, 21)]

trigger_mux_name = 'TRIGGER_SYSID5'
trigger_mux_value = 5

trigger_mux = []
prbs_reset = []
base_id = []

for crate in crates:
    prefix = get_pv_prefix(crate, rtmlamp_slot)
    trigger_mux.append(create_pv(prefix + trigger_mux_name + 'RcvInSel-SP'))
    prbs_reset.append(create_pv(prefix + 'SYSIDPRBSSyncEn-Sel'))
    base_id.append(create_pv(prefix + 'SYSIDBaseBPMId-SP'))

fofb_event = create_pv("AS-RaMO:TI-EVG:Evt10ExtTrig-Cmd")

wait_for_pv_connection()

put_pv(trigger_mux, trigger_mux_value)

for i, crate in enumerate(crates):
    put_pv(base_id[i:i+1], i * 8, wait=False)
wait_pv()

if args.reset_prbs:
    put_pv(prbs_reset, 1)

    put_pv([fofb_event], 1)
    sleep(2)

    put_pv(prbs_reset, 0)
