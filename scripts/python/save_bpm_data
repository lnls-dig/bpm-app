#!/usr/bin/env python3

'''
Author: Ã‰rico Nogueira
'''

from argparse import ArgumentParser
from pickle import dump

import numpy as np

from bpm_app.pvs import create_pv, wait_for_pv_connection, get_pv
from bpm_app.sirius import si_bpm_slots, first_si_bpm_slot, crate_number, get_pv_prefix

parser = ArgumentParser('save_bpm_data', 'Save BPM data')
parser.add_argument('output_file')
parser.add_argument('--antennas', action='store_true')
parser.add_argument('--positions', action='store_true')
parser.add_argument('--post-mortem', action='store_true')

args = parser.parse_args()

file_name = args.output_file

acq_type = 'GEN'
if args.post_mortem:
    acq_type = 'PM'

crates = [crate_number(i) for i in range(1, 21)]

pvs_per_bpm = {}
xgains = {}
ygains = {}

for crate in crates:
    for slot in si_bpm_slots[crate]:
        # ignore ID BPMs
        if slot < first_si_bpm_slot:
            continue

        key = (crate, slot)

        prefix = get_pv_prefix(crate, slot)
        bpm_pvs = {}
        if args.antennas:
            for l in ['a','b','c','d']:
                bpm_pvs[l] = create_pv(prefix + f'{acq_type}_{l.upper()}ArrayData')
        if args.positions:
            for l in ['x','y','sum']:
                bpm_pvs[l] = create_pv(prefix + f'{acq_type}_{l.upper()}ArrayData')

        bpm_pvs['xgain'] = create_pv(prefix + 'PosKx-RB')
        bpm_pvs['ygain'] = create_pv(prefix + 'PosKy-RB')

        pvs_per_bpm[key] = bpm_pvs

wait_for_pv_connection()

data = {}
for key in pvs_per_bpm:
    data[key] = {}
    for l in pvs_per_bpm[key]:
        data[key][l] = get_pv([pvs_per_bpm[key][l]])[0]

with open(file_name, 'wb') as f:
    dump(data, f)
