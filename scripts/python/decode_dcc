#!/usr/bin/env python3

'''
Author: Melissa Aguiar
Modified by: Ã‰rico Nogueira
'''

from argparse import ArgumentParser

import numpy as np
from epics import PV

parser = ArgumentParser(
        "decode_dcc",
        "Decode DCC packets from DCC Acq cores")
parser.add_argument("--bpm-id", type=int)
parser.add_argument("PV_NAME")

args = parser.parse_args()

pv_name = args.PV_NAME
data = PV(pv_name).get()

desired_bpm_id = args.bpm_id

def two2dec(s):
  if s[0] == '1':
    return -1 * (int(''.join('1' if x == '0' else '0' for x in s), 2) + 1)
  else:
    return int(s, 2)

def conv_int32_to_uint32(x):
  INT32_TO_UINT32 = (1 << 32)
  INT32_SIGN_BIT = (1 << 31)
  return x + INT32_TO_UINT32 if (x & INT32_SIGN_BIT) else x

print("| {:8} | {:^10} | {:^8} | {:^6} | {:^10} | {:^10} | {:^10} | {:^10} | {:^10} | {:^10} | {:^10} | {:^10} | {:^10} | {:^10} | {:^10} |".
  format("packet #", "tf_cntr_16", "tf_start", "bpm_id", "bpm_x", "bpm_y", "tf_cntr_32", "sp_x_0", "sp_y_0", "sp_x_1", "sp_y_1",  "sp_x_2", "sp_y_2", "sp_x_3", "sp_y_3"))

for i in range(len(data)//8):
  atoms = data[i*8:i*8+8]

  tf_cntr_16_lsb = (conv_int32_to_uint32(atoms[3]) & 0xFFFF0000) >> 16
  tf_start = (conv_int32_to_uint32(atoms[3]) & 0x8000) >> 15
  bpm_id = (conv_int32_to_uint32(atoms[3]) & 0x7FFF)
  bpm_pos_x = atoms[2]
  bpm_pos_y = atoms[1]
  tf_cnrt_32 = conv_int32_to_uint32(atoms[0])

  aux_sp_0 = atoms[4]
  aux_sp_1 = atoms[5]
  aux_sp_2 = atoms[6]
  aux_sp_3 = atoms[7]

  if desired_bpm_id is not None and desired_bpm_id != bpm_id:
      continue

  print("| {:8} | {:^10} | {:^8} | {:^6} | {:^10} | {:^10} | {:^10} | {:^10} | {:^10} | {:^10} | {:^10} | {:^10} | {:^10} | {:^10} | {:^10} |".
    format(i, tf_cntr_16_lsb, tf_start, bpm_id,
      bpm_pos_x,
      bpm_pos_y,
      tf_cnrt_32,
      two2dec(format((conv_int32_to_uint32(aux_sp_0) & 0xFFFF0000) >> 16, "16b")),
      two2dec(format((conv_int32_to_uint32(aux_sp_0) & 0xFFFF), "16b")),
      two2dec(format((conv_int32_to_uint32(aux_sp_1) & 0xFFFF0000) >> 16, "16b")),
      two2dec(format((conv_int32_to_uint32(aux_sp_1) & 0xFFFF), "16b")),
      two2dec(format((conv_int32_to_uint32(aux_sp_2) & 0xFFFF0000) >> 16, "16b")),
      two2dec(format((conv_int32_to_uint32(aux_sp_2) & 0xFFFF), "16b")),
      two2dec(format((conv_int32_to_uint32(aux_sp_3) & 0xFFFF0000) >> 16, "16b")),
      two2dec(format((conv_int32_to_uint32(aux_sp_3) & 0xFFFF), "16b"))
      ))
